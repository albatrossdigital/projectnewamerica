3.2.0.alpha.95 (Bleeding Edge)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:
@linei:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@has_childrenT:@options{ :@children[io:Sass::Tree::ImportNode
:@imported_filename"shared;i;0;	@;
[ o:Sass::Tree::CommentNode
;i:
@type:silent;	@;
[ :@value["/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */o;
;i;;;	@;
[ ;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */o;
;i;;;	@;
[ ;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */o;
;i ;;;	@;
[ ;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */o;
;i4;;;	@;
[ ;["a/* Defaults ------------------------------------------------------------------
 * @doc on */o;
;i7;;;	@;
[ ;["./* The default x-origin for transforms */o:Sass::Tree::VariableNode:@guarded"!default:
@name"default-origin-x;i8:
@expro:Sass::Script::Number;i8:@denominator_units[ :@numerator_units["%:@original"50%;	@;i7;	@;
[ o;
;i9;;;	@;
[ ;["./* The default y-origin for transforms */o;;"!default;"default-origin-y;i:;o;;i:;[ ;["%;"50%;	@;i7;	@;
[ o;
;i;;;;	@;
[ ;["./* The default z-origin for transforms */o;;"!default;"default-origin-z;i<;o;;i<;[ ;["%;"50%;	@;i7;	@;
[ o;
;i?;;;	@;
[ ;["//* The default x-multiplier for scaling */o;;"!default;"default-scale-x;i@;o;;i@;[ ;[ ;"	1.25;	@;f	1.25;	@;
[ o;
;iA;;;	@;
[ ;["//* The default y-multiplier for scaling */o;;"!default;"default-scale-y;iB;o:Sass::Script::Variable	;"default-scale-x;iB;	@:@underscored_name"default_scale_x;	@;
[ o;
;iC;;;	@;
[ ;["//* The default z-multiplier for scaling */o;;"!default;"default-scale-z;iD;o;	;"default-scale-x;iD;	@;"default_scale_x;	@;
[ o;
;iG;;;	@;
[ ;["*/* The default angle for rotations */o;;"!default;"default-rotate;iH;o;;iH;[ ;["deg;"
45deg;	@;i2;	@;
[ o;
;iK;;;	@;
[ ;["</* The default x-vector for the axis of 3d rotations */o;;"!default;"default-vector-x;iL;o;;iL;@O;[ ;"1;	@;i;	@;
[ o;
;iM;;;	@;
[ ;["</* The default y-vector for the axis of 3d rotations */o;;"!default;"default-vector-y;iN;o;;iN;@O;[ ;"1;	@;i;	@;
[ o;
;iO;;;	@;
[ ;["</* The default z-vector for the axis of 3d rotations */o;;"!default;"default-vector-z;iP;o;;iP;@O;[ ;"1;	@;i;	@;
[ o;
;iS;;;	@;
[ ;["0/* The default x-length for translations */o;;"!default;"default-translate-x;iT;o;;iT;[ ;["em;"1em;	@;i;	@;
[ o;
;iU;;;	@;
[ ;["0/* The default y-length for translations */o;;"!default;"default-translate-y;iV;o;	;"default-translate-x;iV;	@;"default_translate_x;	@;
[ o;
;iW;;;	@;
[ ;["0/* The default z-length for translations */o;;"!default;"default-translate-z;iX;o;	;"default-translate-x;iX;	@;"default_translate_x;	@;
[ o;
;i[;;;	@;
[ ;["*/* The default x-angle for skewing */o;;"!default;"default-skew-x;i\;o;;i\;[ ;["deg;"	5deg;	@;i
;	@;
[ o;
;i];;;	@;
[ ;["*/* The default y-angle for skewing */o;;"!default;"default-skew-y;i^;o;;i^;[ ;["deg;"	5deg;	@;i
;	@;
[ o;
;ia;;;	@;
[ ;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */o:Sass::Tree::MixinDefNode:
@args[[o;;"origin;	@;"origin0[o;;"only3d;	@;"only3d0;"apply-origin;il;T;	@;
[o;;0;"only3d;im;o:Sass::Script::Operation
;im:@operand2o;
;im;o;;im;@O;[ ;"2;	@;i:@operator:gt;	@:@operand1o:Sass::Script::Funcall
;[o;"
;[o;	;"origin;im;	@;"origin;"-compass-list;im:@keywords{ ;	@;"-compass-list-size;im;#{ ;	@;:or;	@;!o;	;"only3d;im;	@;"only3d;	@;
[ u:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@name"only3d:
@linein:@options{ :@underscored_name"only3du:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	:
@lineis:
@type:identifier:@options{ :@value"transform-origino:Sass::Script::Variable	:
@name"origin;is;@
:@underscored_name"origino;	;it;	;
;@
;"	-mozo;	;it;	;
;@
;"-webkito;	;it;	;
;@
;"-oo;	;it;	;
;@
;"-mso:!Sass::Script::UnaryOperation	;it:@operator:not;@
:@operando;	;it;	;
;@
;"-khtmlo;	;it;	;
;@
;"official;"experimental;iu:@keywords{ ;@
:@children[ [o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	;io:
@type:identifier;@:@value"transform-origino; 	;"origin;io;@;	"origino:!Sass::Script::UnaryOperation	;ip:@operator:not;@:@operando;	;ip;;;@;"	-mozo;	;ip;;;@;"-webkito;	;ip;;;@;o;	;ip;;;@;"-oo;	;ip;;;@;o;	;ip;;;@;"-mso;	;ip;;;@;o;	;ip;;;@;"-khtmlo;	;ip;;;@;"official;"experimental;iq:@keywords{ ;@:@children[ o;
;iy;;;	@;
[ ;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */o;;[	[o;;"origin-x;	@;"origin_xo;	;"default-origin-x;i|;	@;"default_origin_x[o;;"origin-y;	@;"origin_yo;	;"default-origin-y;i};	@;"default_origin_y[o;;"origin-z;	@;"origin_zo:Sass::Script::Bool;i~;	@;F[o;;"only3d;	@;"only3do;"
;[o;	;"origin-z;i;	@;"origin_zo;&;i;	@;To;&;i;	@;F;"if;i;#{ ;	@;"transform-origin;i;T;	@;
[o;;0;"origin;i;o;"
;[o:Sass::Script::String	;i;:string;	@;" ;"unquote;i;#{ ;	@;	@;
[ u;%[o:Sass::Script::Operation
:
@linei:@operand2o:Sass::Script::Variable	:
@name"origin-z;i:@options{ :@underscored_name"origin_z:@operator:or;
@	:@operand1o; 
;i;o;	;	"origin-y;i;
@	;"origin_y;;;
@	;o;	;	"origin-x;i;
@	;"origin_x0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@name"origin-x:
@linei:@options{ :@underscored_name"origin_xu:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:@guarded0:
@name"origin:
@linei:
@expro:Sass::Script::Number;i:@denominator_units[ :@numerator_units["%:@original"50%:@options{ :@valuei7;@:@children[ [o:Sass::Tree::VariableNode:@guarded0;"origin;i:
@expro; 	;"origin-x;i;@;	"origin_x;@:@children[ u;Þ[o:Sass::Script::Variable	:
@name"origin-y:
@linei:@options{ :@underscored_name"origin_yu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@name"origin-z:
@linei:@options{ :@underscored_name"origin_z0[o:Sass::Tree::VariableNode:@guarded0;"origin;i:
@expro:Sass::Script::List	:@separator:
space;i;@:@value[o; 	;"origin;i;@;	"origino:Sass::Script::Number;i:@denominator_units[ :@numerator_units["%:@original"50%;@;i7;@:@children[ [o:Sass::Tree::VariableNode:@guarded0;"origin;i:
@expro:Sass::Script::List	:@separator:
space;i;@:@value[o; 	;"origin;i;@;	"origino; 	;"origin-y;i;@;	"origin_y;@:@children[ u;5[o:Sass::Script::Variable	:
@name"origin-z:
@linei:@options{ :@underscored_name"origin_z0[o:Sass::Tree::VariableNode:@guarded0;"origin;i:
@expro:Sass::Script::List	:@separator:
space;i;@:@value[o; 	;"origin;i;@;	"origino; 	;"origin-z;i;@;	"origin_z;@:@children[ o:Sass::Tree::MixinNode:
@args[o;	;	"origin;i;
@	;"origino;	;	"only3d;i;
@	;"only3d;	"apply-origin;i:@keywords{ ;
@	:@children[ o;
;i;;;	@;
[ ;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */o;;[[o;;"transform;	@;"transform0[o;;"only3d;	@;"only3do;&;i;	@;F;"transform;i;T;	@;
[u;%6[o:Sass::Script::Variable	:
@name"only3d:
@linei:@options{ :@underscored_name"only3du:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	:
@linei:
@type:identifier:@options{ :@value"transformo:Sass::Script::Variable	:
@name"transform;i;@
:@underscored_name"transformo;	;i;	;
;@
;"	-mozo;	;i;	;
;@
;"-webkito;	;i;	;
;@
;"-oo;	;i;	;
;@
;"-mso:!Sass::Script::UnaryOperation	;i:@operator:not;@
:@operando;	;i;	;
;@
;"-khtmlo;	;i;	;
;@
;"official;"experimental;i:@keywords{ ;@
:@children[ [o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	;i:
@type:identifier;@:@value"transformo; 	;"transform;i;@;	"transformo:!Sass::Script::UnaryOperation	;i:@operator:not;@:@operando;	;i;;;@;"	-mozo;	;i;;;@;"-webkito;	;i;;;@;o;	;i;;;@;"-oo;	;i;;;@;o;	;i;;;@;"-mso;	;i;;;@;o;	;i;;;@;"-khtmlo;	;i;;;@;"official;"experimental;i:@keywords{ ;@:@children[ o;
;i;;;	@;
[ ;["D/* Shortcut to target all browsers with 2D transform support */o;;[[o;;"
trans;	@;"
trans0;"transform2d;i ;T;	@;
[o:Sass::Tree::MixinNode;[o;	;"
trans;i¡;	@;"
transo;&;i¡;	@;F;"transform;i¡;#{ ;	@;
[ o;
;i¤;;;	@;
[ ;["E/* Shortcut to target only browsers with 3D transform support */o;;[[o;;"
trans;	@;"
trans0;"transform3d;i¥;T;	@;
[o;);[o;	;"
trans;i¦;	@;"
transo;&;i¦;	@;T;"transform;i¦;#{ ;	@;
[ o;
;i©;;;	@;
[ ;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */o;
;i­;;;	@;
[ ;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */o;;[[o;;"p;	@;"p0;"perspective;i´;T;	@;
[o;);[o;'	;iµ;:identifier;	@;"perspectiveo;	;"p;iµ;	@;"po:!Sass::Script::UnaryOperation	;i¶;:not;	@:@operando;'	;i¶;;*;	@;"	-mozo;'	;i¶;;*;	@;"-webkito;+	;i¶;;,;	@;-o;'	;i¶;;*;	@;"-oo;+	;i¶;;,;	@;-o;'	;i¶;;*;	@;"-mso;+	;i¶;;,;	@;-o;'	;i¶;;*;	@;"-khtmlo;'	;i¶;;*;	@;"official;"experimental;i·;#{ ;	@;
[ o;
;iº;;;	@;
[ ;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */o;;[[o;;"origin;	@;"origino;;i¿;[ ;["%;"50%;	@;i7;"perspective-origin;i¿;T;	@;
[o;);[o;'	;iÀ;;*;	@;"perspective-origino;	;"origin;iÀ;	@;"origino;+	;iÁ;;,;	@;-o;'	;iÁ;;*;	@;"	-mozo;'	;iÁ;;*;	@;"-webkito;+	;iÁ;;,;	@;-o;'	;iÁ;;*;	@;"-oo;+	;iÁ;;,;	@;-o;'	;iÁ;;*;	@;"-mso;+	;iÁ;;,;	@;-o;'	;iÁ;;*;	@;"-khtmlo;'	;iÁ;;*;	@;"official;"experimental;iÂ;#{ ;	@;
[ o;
;iÅ;;;	@;
[ ;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */o;;[[o;;"
style;	@;"
styleo;'	;iË;;*;	@;"preserve-3d;"transform-style;iË;T;	@;
[o;);[o;'	;iÌ;;*;	@;"transform-styleo;	;"
style;iÌ;	@;"
styleo;+	;iÍ;;,;	@;-o;'	;iÍ;;*;	@;"	-mozo;'	;iÍ;;*;	@;"-webkito;+	;iÍ;;,;	@;-o;'	;iÍ;;*;	@;"-oo;+	;iÍ;;,;	@;-o;'	;iÍ;;*;	@;"-mso;+	;iÍ;;,;	@;-o;'	;iÍ;;*;	@;"-khtmlo;'	;iÍ;;*;	@;"official;"experimental;iÎ;#{ ;	@;
[ o;
;iÑ;;;	@;
[ ;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */o;;[[o;;"visibility;	@;"visibilityo;'	;i×;;*;	@;"hidden;"backface-visibility;i×;T;	@;
[o;);[o;'	;iØ;;*;	@;"backface-visibilityo;	;"visibility;iØ;	@;"visibilityo;+	;iÙ;;,;	@;-o;'	;iÙ;;*;	@;"	-mozo;'	;iÙ;;*;	@;"-webkito;+	;iÙ;;,;	@;-o;'	;iÙ;;*;	@;"-oo;+	;iÙ;;,;	@;-o;'	;iÙ;;*;	@;"-mso;+	;iÙ;;,;	@;-o;'	;iÙ;;*;	@;"-khtmlo;'	;iÙ;;*;	@;"official;"experimental;iÚ;#{ ;	@;
[ o;
;iÝ;;;	@;
[ ;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */o;
;iä;;;	@;
[ ;["a/* Scale ---------------------------------------------------------------------
 * @doc on */o;
;iç;;;	@;
[ ;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[	[o;;"scale-x;	@;"scale_xo;	;"default-scale-x;iñ;	@;"default_scale_x[o;;"scale-y;	@;"scale_yo;	;"scale-x;iò;	@;"scale_x[o;;"perspective;	@;"perspectiveo;&;ió;	@;F[o;;"only3d;	@;"only3do;&;iô;	@;F;"
scale;iõ;T;	@;
[o;;0;"
trans;iö;o;"
;[o;	;"scale-x;iö;	@;"scale_xo;	;"scale-y;iö;	@;"scale_y;"
scale;iö;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei÷:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i÷:
@expro:Sass::Script::List	:@separator:
space;i÷;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;i÷;@;	"perspective;"perspective;i÷:@keywords{ ;@o; 	;"
trans;i÷;@;	"
trans;@:@children[ o;);[o;	;"
trans;iø;	@;"
transo;	;"only3d;iø;	@;"only3d;"transform;iø;#{ ;	@;
[ o;
;iû;;;	@;
[ ;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"
scale;	@;"
scaleo;	;"default-scale-x;i ;	@;"default_scale_x[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;"scaleX;i;T;	@;
[o;;0;"
trans;i;o;"
;[o;	;"
scale;i;	@;"
scale;"scaleX;i;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i:
@expro:Sass::Script::List	:@separator:
space;i;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;i;@;	"perspective;"perspective;i:@keywords{ ;@o; 	;"
trans;i;@;	"
trans;@:@children[ o;);[o;	;"
trans;i;	@;"
transo;	;"only3d;i;	@;"only3d;"transform;i;#{ ;	@;
[ o;
;i	;;;	@;
[ ;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"
scale;	@;"
scaleo;	;"default-scale-y;i;	@;"default_scale_y[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;"scaleY;i;T;	@;
[o;;0;"
trans;i;o;"
;[o;	;"
scale;i;	@;"
scale;"scaleY;i;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i:
@expro:Sass::Script::List	:@separator:
space;i;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;i;@;	"perspective;"perspective;i:@keywords{ ;@o; 	;"
trans;i;@;	"
trans;@:@children[ o;);[o;	;"
trans;i;	@;"
transo;	;"only3d;i;	@;"only3d;"transform;i;#{ ;	@;
[ o;
;i;;;	@;
[ ;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"
scale;	@;"
scaleo;	;"default-scale-z;i;	@;"default_scale_z[o;;"perspective;	@;"perspectiveo;&;i;	@;F;"scaleZ;i;T;	@;
[o;;0;"
trans;i;o;"
;[o;	;"
scale;i;	@;"
scale;"scaleZ;i;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei :@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i :
@expro:Sass::Script::List	:@separator:
space;i ;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;i ;@;	"perspective;"perspective;i :@keywords{ ;@o; 	;"
trans;i ;@;	"
trans;@:@children[ o;);[o;	;"
trans;i!;	@;"
trans;"transform3d;i!;#{ ;	@;
[ o;
;i$;;;	@;
[ ;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[	[o;;"scale-x;	@;"scale_xo;	;"default-scale-x;i);	@;"default_scale_x[o;;"scale-y;	@;"scale_yo;	;"default-scale-y;i*;	@;"default_scale_y[o;;"scale-z;	@;"scale_zo;	;"default-scale-z;i+;	@;"default_scale_z[o;;"perspective;	@;"perspectiveo;&;i,;	@;F;"scale3d;i-;T;	@;
[o;;0;"
trans;i.;o;"
;[o;	;"scale-x;i.;	@;"scale_xo;	;"scale-y;i.;	@;"scale_yo;	;"scale-z;i.;	@;"scale_z;"scale3d;i.;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei/:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i/:
@expro:Sass::Script::List	:@separator:
space;i/;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;i/;@;	"perspective;"perspective;i/:@keywords{ ;@o; 	;"
trans;i/;@;	"
trans;@:@children[ o;);[o;	;"
trans;i0;	@;"
trans;"transform3d;i0;#{ ;	@;
[ o;
;i3;;;	@;
[ ;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */o;
;i7;;;	@;
[ ;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"rotate;	@;"rotateo;	;"default-rotate;i=;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;&;i>;	@;F[o;;"only3d;	@;"only3do;&;i?;	@;F;"rotate;i@;T;	@;
[o;;0;"
trans;iA;o;"
;[o;	;"rotate;iA;	@;"rotate;"rotate;iA;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiB:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;iB:
@expro:Sass::Script::List	:@separator:
space;iB;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;iB;@;	"perspective;"perspective;iB:@keywords{ ;@o; 	;"
trans;iB;@;	"
trans;@:@children[ o;);[o;	;"
trans;iC;	@;"
transo;	;"only3d;iC;	@;"only3d;"transform;iC;#{ ;	@;
[ o;
;iF;;;	@;
[ ;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"rotate;	@;"rotateo;	;"default-rotate;iJ;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;&;iK;	@;F[o;;"only3d;	@;"only3do;&;iL;	@;F;"rotateZ;iM;T;	@;
[o;);[o;	;"rotate;iN;	@;"rotateo;	;"perspective;iN;	@;"perspectiveo;	;"only3d;iN;	@;"only3d;"rotate;iN;#{ ;	@;
[ o;
;iQ;;;	@;
[ ;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"rotate;	@;"rotateo;	;"default-rotate;iV;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;&;iW;	@;F;"rotateX;iX;T;	@;
[o;;0;"
trans;iY;o;"
;[o;	;"rotate;iY;	@;"rotate;"rotateX;iY;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiZ:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;iZ:
@expro:Sass::Script::List	:@separator:
space;iZ;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;iZ;@;	"perspective;"perspective;iZ:@keywords{ ;@o; 	;"
trans;iZ;@;	"
trans;@:@children[ o;);[o;	;"
trans;i[;	@;"
trans;"transform3d;i[;#{ ;	@;
[ o;
;i^;;;	@;
[ ;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"rotate;	@;"rotateo;	;"default-rotate;ic;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;&;id;	@;F;"rotateY;ie;T;	@;
[o;;0;"
trans;if;o;"
;[o;	;"rotate;if;	@;"rotate;"rotateY;if;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineig:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;ig:
@expro:Sass::Script::List	:@separator:
space;ig;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;ig;@;	"perspective;"perspective;ig:@keywords{ ;@o; 	;"
trans;ig;@;	"
trans;@:@children[ o;);[o;	;"
trans;ih;	@;"
trans;"transform3d;ih;#{ ;	@;
[ o;
;ik;;;	@;
[ ;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[
[o;;"vector-x;	@;"vector_xo;	;"default-vector-x;is;	@;"default_vector_x[o;;"vector-y;	@;"vector_yo;	;"default-vector-y;it;	@;"default_vector_y[o;;"vector-z;	@;"vector_zo;	;"default-vector-z;iu;	@;"default_vector_z[o;;"rotate;	@;"rotateo;	;"default-rotate;iv;	@;"default_rotate[o;;"perspective;	@;"perspectiveo;&;iw;	@;F;"rotate3d;ix;T;	@;
[o;;0;"
trans;iy;o;"
;[	o;	;"vector-x;iy;	@;"vector_xo;	;"vector-y;iy;	@;"vector_yo;	;"vector-z;iy;	@;"vector_zo;	;"rotate;iy;	@;"rotate;"rotate3d;iy;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiz:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;iz:
@expro:Sass::Script::List	:@separator:
space;iz;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;iz;@;	"perspective;"perspective;iz:@keywords{ ;@o; 	;"
trans;iz;@;	"
trans;@:@children[ o;);[o;	;"
trans;i{;	@;"
trans;"transform3d;i{;#{ ;	@;
[ o;
;i~;;;	@;
[ ;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */o;
;i;;;	@;
[ ;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[	[o;;"translate-x;	@;"translate_xo;	;"default-translate-x;i;	@;"default_translate_x[o;;"translate-y;	@;"translate_yo;	;"default-translate-y;i;	@;"default_translate_y[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;"translate;i;T;	@;
[o;;0;"
trans;i;o;"
;[o;	;"translate-x;i;	@;"translate_xo;	;"translate-y;i;	@;"translate_y;"translate;i;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i:
@expro:Sass::Script::List	:@separator:
space;i;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;i;@;	"perspective;"perspective;i:@keywords{ ;@o; 	;"
trans;i;@;	"
trans;@:@children[ o;);[o;	;"
trans;i;	@;"
transo;	;"only3d;i;	@;"only3d;"transform;i;#{ ;	@;
[ o;
;i;;;	@;
[ ;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"trans-x;	@;"trans_xo;	;"default-translate-x;i;	@;"default_translate_x[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;"translateX;i;T;	@;
[o;;0;"
trans;i;o;"
;[o;	;"trans-x;i;	@;"trans_x;"translateX;i;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i:
@expro:Sass::Script::List	:@separator:
space;i;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;i;@;	"perspective;"perspective;i:@keywords{ ;@o; 	;"
trans;i;@;	"
trans;@:@children[ o;);[o;	;"
trans;i;	@;"
transo;	;"only3d;i;	@;"only3d;"transform;i;#{ ;	@;
[ o;
;i ;;;	@;
[ ;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"trans-y;	@;"trans_yo;	;"default-translate-y;i¥;	@;"default_translate_y[o;;"perspective;	@;"perspectiveo;&;i¦;	@;F[o;;"only3d;	@;"only3do;&;i§;	@;F;"translateY;i¨;T;	@;
[o;;0;"
trans;i©;o;"
;[o;	;"trans-y;i©;	@;"trans_y;"translateY;i©;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiª:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;iª:
@expro:Sass::Script::List	:@separator:
space;iª;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;iª;@;	"perspective;"perspective;iª:@keywords{ ;@o; 	;"
trans;iª;@;	"
trans;@:@children[ o;);[o;	;"
trans;i«;	@;"
transo;	;"only3d;i«;	@;"only3d;"transform;i«;#{ ;	@;
[ o;
;i®;;;	@;
[ ;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"trans-z;	@;"trans_zo;	;"default-translate-z;i³;	@;"default_translate_z[o;;"perspective;	@;"perspectiveo;&;i´;	@;F;"translateZ;iµ;T;	@;
[o;;0;"
trans;i¶;o;"
;[o;	;"trans-z;i¶;	@;"trans_z;"translateZ;i¶;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei·:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i·:
@expro:Sass::Script::List	:@separator:
space;i·;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;i·;@;	"perspective;"perspective;i·:@keywords{ ;@o; 	;"
trans;i·;@;	"
trans;@:@children[ o;);[o;	;"
trans;i¸;	@;"
trans;"transform3d;i¸;#{ ;	@;
[ o;
;i»;;;	@;
[ ;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[	[o;;"translate-x;	@;"translate_xo;	;"default-translate-x;iÀ;	@;"default_translate_x[o;;"translate-y;	@;"translate_yo;	;"default-translate-y;iÁ;	@;"default_translate_y[o;;"translate-z;	@;"translate_zo;	;"default-translate-z;iÂ;	@;"default_translate_z[o;;"perspective;	@;"perspectiveo;&;iÃ;	@;F;"translate3d;iÄ;T;	@;
[o;;0;"
trans;iÅ;o;"
;[o;	;"translate-x;iÅ;	@;"translate_xo;	;"translate-y;iÅ;	@;"translate_yo;	;"translate-z;iÅ;	@;"translate_z;"translate3d;iÅ;#{ ;	@;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiÆ:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;iÆ:
@expro:Sass::Script::List	:@separator:
space;iÆ;@:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;iÆ;@;	"perspective;"perspective;iÆ:@keywords{ ;@o; 	;"
trans;iÆ;@;	"
trans;@:@children[ o;);[o;	;"
trans;iÇ;	@;"
trans;"transform3d;iÇ;#{ ;	@;
[ o;
;iÊ;;;	@;
[ ;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */o;
;iÎ;;;	@;
[ ;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"skew-x;	@;"skew_xo;	;"default-skew-x;iÖ;	@;"default_skew_x[o;;"skew-y;	@;"skew_yo;	;"default-skew-y;i×;	@;"default_skew_y[o;;"only3d;	@;"only3do;&;iØ;	@;F;"	skew;iÙ;T;	@;
[o;;0;"
trans;iÚ;o;"
;[o;	;"skew-x;iÚ;	@;"skew_xo;	;"skew-y;iÚ;	@;"skew_y;"	skew;iÚ;#{ ;	@;	@;
[ o;);[o;	;"
trans;iÛ;	@;"
transo;	;"only3d;iÛ;	@;"only3d;"transform;iÛ;#{ ;	@;
[ o;
;iÞ;;;	@;
[ ;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"skew-x;	@;"skew_xo;	;"default-skew-x;iä;	@;"default_skew_x[o;;"only3d;	@;"only3do;&;iå;	@;F;"
skewX;iæ;T;	@;
[o;;0;"
trans;iç;o;"
;[o;	;"skew-x;iç;	@;"skew_x;"
skewX;iç;#{ ;	@;	@;
[ o;);[o;	;"
trans;iè;	@;"
transo;	;"only3d;iè;	@;"only3d;"transform;iè;#{ ;	@;
[ o;
;ië;;;	@;
[ ;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"skew-y;	@;"skew_yo;	;"default-skew-y;iñ;	@;"default_skew_y[o;;"only3d;	@;"only3do;&;iò;	@;F;"
skewY;ió;T;	@;
[o;;0;"
trans;iô;o;"
;[o;	;"skew-y;iô;	@;"skew_y;"
skewY;iô;#{ ;	@;	@;
[ o;);[o;	;"
trans;iõ;	@;"
transo;	;"only3d;iõ;	@;"only3d;"transform;iõ;#{ ;	@;
[ o;
;iù;;;	@;
[ ;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;[[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"scale-x;	@;"scale_xo;&;i;	@;F[o;;"scale-y;	@;"scale_yo;&;i;	@;F[o;;"scale-z;	@;"scale_zo;&;i;	@;F[o;;"rotate-x;	@;"rotate_xo;&;i;	@;F[o;;"rotate-y;	@;"rotate_yo;&;i;	@;F[o;;"rotate-z;	@;"rotate_zo;&;i	;	@;F[o;;"rotate3d;	@;"rotate3do;&;i
;	@;F[o;;"trans-x;	@;"trans_xo;&;i;	@;F[o;;"trans-y;	@;"trans_yo;&;i;	@;F[o;;"trans-z;	@;"trans_zo;&;i;	@;F[o;;"skew-x;	@;"skew_xo;&;i;	@;F[o;;"skew-y;	@;"skew_yo;&;i;	@;F[o;;"origin-x;	@;"origin_xo;&;i;	@;F[o;;"origin-y;	@;"origin_yo;&;i;	@;F[o;;"origin-z;	@;"origin_zo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;"create-transform;i;T;	@;
[o;;0;"
trans;i;o;"
;[o;'	;i;;(;	@;" ;"unquote;i;#{ ;	@;	@;
[ o;
;i;;;	@;
[ ;["/* perspective */u;%.[o:Sass::Script::Variable	:
@name"perspective:
@linei:@options{ :@underscored_name"perspective0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i:
@expro:Sass::Script::Funcall
:
@args[o; 	;"perspective;i;@;	"perspective;"perspective;i:@keywords{ ;@;@:@children[ o;
;i;;;	@;
[ ;["/* scale */u;%Ê[o:Sass::Script::Operation
:
@linei:@operand2o:Sass::Script::Variable	:
@name"scale-y;i:@options{ :@underscored_name"scale_y:@operator:and;
@	:@operand1o;	;	"scale-x;i;
@	;"scale_xu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@name"scale-x:
@linei:@options{ :@underscored_name"scale_x0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i:
@expro:Sass::Script::List	:@separator:
space;i;@:@value[o; 	;"
trans;i;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"scale-x;i;@;	"scale_x;"scaleX;i:@keywords{ ;@;@:@children[ u; v[o:Sass::Script::Variable	:
@name"scale-y:
@linei :@options{ :@underscored_name"scale_y0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i :
@expro:Sass::Script::List	:@separator:
space;i ;@:@value[o; 	;"
trans;i ;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"scale-y;i ;@;	"scale_y;"scaleY;i :@keywords{ ;@;@:@children[ u; v[o:Sass::Script::Variable	:
@name"scale-z:
@linei!:@options{ :@underscored_name"scale_z0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i!:
@expro:Sass::Script::List	:@separator:
space;i!;@:@value[o; 	;"
trans;i!;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"scale-z;i!;@;	"scale_z;"scaleZ;i!:@keywords{ ;@;@:@children[ [u;L[o:Sass::Script::Variable	:
@name"scale-z:
@linei:@options{ :@underscored_name"scale_zu:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:@guarded0:
@name"
trans:
@linei:
@expro:Sass::Script::List	:@separator:
space;i:@options{ :@value[o:Sass::Script::Variable	;"
trans;i;@
:@underscored_name"
transo:Sass::Script::Funcall
:
@args[o;	;"scale-x;i;@
;"scale_xo;	;"scale-y;i;@
;"scale_y;"
scale;i:@keywords{ ;@
;@
:@children[ [o:Sass::Tree::VariableNode:@guarded0;"
trans;i:
@expro:Sass::Script::List	:@separator:
space;i;@:@value[o; 	;"
trans;i;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"scale-x;i;@;	"scale_xo; 	;"scale-y;i;@;	"scale_yo; 	;"scale-z;i;@;	"scale_z;"scale3d;i:@keywords{ ;@;@:@children[ o;
;i$;;;	@;
[ ;["/* rotate */u;%{[o:Sass::Script::Variable	:
@name"rotate-x:
@linei%:@options{ :@underscored_name"rotate_x0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i%:
@expro:Sass::Script::List	:@separator:
space;i%;@:@value[o; 	;"
trans;i%;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"rotate-x;i%;@;	"rotate_x;"rotateX;i%:@keywords{ ;@;@:@children[ u;%{[o:Sass::Script::Variable	:
@name"rotate-y:
@linei&:@options{ :@underscored_name"rotate_y0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i&:
@expro:Sass::Script::List	:@separator:
space;i&;@:@value[o; 	;"
trans;i&;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"rotate-y;i&;@;	"rotate_y;"rotateY;i&:@keywords{ ;@;@:@children[ u;%{[o:Sass::Script::Variable	:
@name"rotate-z:
@linei':@options{ :@underscored_name"rotate_z0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i':
@expro:Sass::Script::List	:@separator:
space;i';@:@value[o; 	;"
trans;i';@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"rotate-z;i';@;	"rotate_z;"rotateZ;i':@keywords{ ;@;@:@children[ u;%|[o:Sass::Script::Variable	:
@name"rotate3d:
@linei(:@options{ :@underscored_name"rotate3d0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i(:
@expro:Sass::Script::List	:@separator:
space;i(;@:@value[o; 	;"
trans;i(;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"rotate3d;i(;@;	"rotate3d;"rotate3d;i(:@keywords{ ;@;@:@children[ o;
;i*;;;	@;
[ ;["/* translate */u;%Þ[o:Sass::Script::Operation
:
@linei+:@operand2o:Sass::Script::Variable	:
@name"trans-y;i+:@options{ :@underscored_name"trans_y:@operator:and;
@	:@operand1o;	;	"trans-x;i+;
@	;"trans_xu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@name"trans-x:
@linei/:@options{ :@underscored_name"trans_x0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i/:
@expro:Sass::Script::List	:@separator:
space;i/;@:@value[o; 	;"
trans;i/;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"trans-x;i/;@;	"trans_x;"translateX;i/:@keywords{ ;@;@:@children[ u; z[o:Sass::Script::Variable	:
@name"trans-y:
@linei0:@options{ :@underscored_name"trans_y0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i0:
@expro:Sass::Script::List	:@separator:
space;i0;@:@value[o; 	;"
trans;i0;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"trans-y;i0;@;	"trans_y;"translateY;i0:@keywords{ ;@;@:@children[ u; z[o:Sass::Script::Variable	:
@name"trans-z:
@linei1:@options{ :@underscored_name"trans_z0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i1:
@expro:Sass::Script::List	:@separator:
space;i1;@:@value[o; 	;"
trans;i1;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"trans-z;i1;@;	"trans_z;"translateZ;i1:@keywords{ ;@;@:@children[ [u;T[o:Sass::Script::Variable	:
@name"trans-z:
@linei,:@options{ :@underscored_name"trans_zu:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:@guarded0:
@name"
trans:
@linei-:
@expro:Sass::Script::List	:@separator:
space;i-:@options{ :@value[o:Sass::Script::Variable	;"
trans;i-;@
:@underscored_name"
transo:Sass::Script::Funcall
:
@args[o;	;"trans-x;i-;@
;"trans_xo;	;"trans-y;i-;@
;"trans_y;"translate;i-:@keywords{ ;@
;@
:@children[ [o:Sass::Tree::VariableNode:@guarded0;"
trans;i,:
@expro:Sass::Script::List	:@separator:
space;i,;@:@value[o; 	;"
trans;i,;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"trans-x;i,;@;	"trans_xo; 	;"trans-y;i,;@;	"trans_yo; 	;"trans-z;i,;@;	"trans_z;"translate3d;i,:@keywords{ ;@;@:@children[ o;
;i4;;;	@;
[ ;["/* skew */u;%[o:Sass::Script::Operation
:
@linei5:@operand2o:Sass::Script::Variable	:
@name"skew-y;i5:@options{ :@underscored_name"skew_y:@operator:and;
@	:@operand1o;	;	"skew-x;i5;
@	;"skew_xu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@name"skew-x:
@linei7:@options{ :@underscored_name"skew_x0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i7:
@expro:Sass::Script::List	:@separator:
space;i7;@:@value[o; 	;"
trans;i7;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"skew-x;i7;@;	"skew_x;"
skewX;i7:@keywords{ ;@;@:@children[ u; q[o:Sass::Script::Variable	:
@name"skew-y:
@linei8:@options{ :@underscored_name"skew_y0[o:Sass::Tree::VariableNode:@guarded0;"
trans;i8:
@expro:Sass::Script::List	:@separator:
space;i8;@:@value[o; 	;"
trans;i8;@;	"
transo:Sass::Script::Funcall
:
@args[o; 	;"skew-y;i8;@;	"skew_y;"
skewY;i8:@keywords{ ;@;@:@children[ [o:Sass::Tree::VariableNode:@guarded0;	"
trans;i5:
@expro:Sass::Script::List	:@separator:
space;i5;
@	:@value[o;	;	"
trans;i5;
@	;"
transo:Sass::Script::Funcall
:
@args[o;	;	"skew-x;i5;
@	;"skew_xo;	;	"skew-y;i5;
@	;"skew_y;	"	skew;i5:@keywords{ ;
@	;
@	:@children[ o;
;i;;;;	@;
[ ;["/* apply it! */o;);[o;	;"
trans;i<;	@;"
transo;	;"only3d;i<;	@;"only3d;"transform;i<;#{ ;	@;
[ o;);[	o;	;"origin-x;i=;	@;"origin_xo;	;"origin-y;i=;	@;"origin_yo;	;"origin-z;i=;	@;"origin_zo;	;"only3d;i=;	@;"only3d;"transform-origin;i=;#{ ;	@;
[ o;
;iA;;;	@;
[ ;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */o;;[[o;;"
scale;	@;"
scaleo;&;iD;	@;F[o;;"rotate;	@;"rotateo;&;iE;	@;F[o;;"trans-x;	@;"trans_xo;&;iF;	@;F[o;;"trans-y;	@;"trans_yo;&;iG;	@;F[o;;"skew-x;	@;"skew_xo;&;iH;	@;F[o;;"skew-y;	@;"skew_yo;&;iI;	@;F[o;;"origin-x;	@;"origin_xo;&;iJ;	@;F[o;;"origin-y;	@;"origin_yo;&;iK;	@;F;"simple-transform;iL;T;	@;
[o;);[o;&;iN;	@;Fo;	;"
scale;iO;	@;"
scaleo;	;"
scale;iO;	@;"
scaleo;&;iO;	@;Fo;&;iP;	@;Fo;&;iP;	@;Fo;	;"rotate;iP;	@;"rotateo;&;iP;	@;Fo;	;"trans-x;iQ;	@;"trans_xo;	;"trans-y;iQ;	@;"trans_yo;&;iQ;	@;Fo;	;"skew-x;iR;	@;"skew_xo;	;"skew-y;iR;	@;"skew_yo;	;"origin-x;iS;	@;"origin_xo;	;"origin-y;iS;	@;"origin_yo;&;iS;	@;Fo;&;iT;	@;F;"create-transform;iU;#{ ;	@;
[ 